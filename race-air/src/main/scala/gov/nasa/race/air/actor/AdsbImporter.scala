/*
 * Copyright (c) 2016, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * The RACE - Runtime for Airspace Concept Evaluation platform is licensed
 * under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gov.nasa.race.air.actor

import java.io.{BufferedReader, IOException, InputStreamReader}
import java.net.Socket

import akka.actor.ActorRef
import com.typesafe.config.Config
import gov.nasa.race._
import gov.nasa.race.actor.ReplayActor
import gov.nasa.race.config.ConfigUtils._
import gov.nasa.race.core.ChannelTopicRequest
import gov.nasa.race.core.RaceActorCapabilities._
import gov.nasa.race.core.{ChannelTopicProvider, RaceContext}
import gov.nasa.race.geo.GeoPosition
import gov.nasa.race.util.ThreadUtils

object AdsbStation {
  final val NoStation = AdsbStation("<none>",None,None,true)
}
case class AdsbStation(id: String, description: Option[String], position: Option[GeoPosition], var isAvailable: Boolean) extends Ordered[AdsbStation] {
  override def compare (other: AdsbStation) = id.compare(other.id)
}


/**
  * common base type for SBS import/replay actors, which are ChannelTopicProviders
  */
trait AdsbImporter extends ChannelTopicProvider {

  val stationId: String = config.getStringOrElse("station-id", "default") // the station we serve
  val stationLocation: Option[GeoPosition] = config.getOptionalGeoPosition("station-location") // where the station is located

  val stationChannel: Option[String] = config.getOptionalString("write-station-to") // where we publish station availability

  override def isRequestAccepted (request: ChannelTopicRequest): Boolean = {
    val channelTopic = request.channelTopic
    if (writeTo.contains(channelTopic.channel)){ // we don't respond to requests through stationChannel
      channelTopic.topic match {
        case Some(id: String) =>
          if (id == stationId) {
            info(s"accepting request for station $id")
            true
          } else false
        case other => false
      }
    } else false
  }

  override def onStartRaceActor(originator: ActorRef): Boolean = {
    if (super.onStartRaceActor(originator)){
      ifSome(stationChannel) { publish(_,AdsbStation(stationId,None,stationLocation,true)) }
      true
    } else false
  }
}

/**
  * a specialized ReplayActor for on-demand SBS messages
  */
class AdsbReplayActor(config: Config) extends ReplayActor(config) with AdsbImporter {
  override def handleMessage = handleReplayMessage orElse handleFilteringPublisherMessage
}


/**
  * Actor to import ADS-B messages via SBS messages
  *
  * For instance, SBS messages can be generated by dump1090 (https://github.com/MalcolmRobb/dump1090.git),
  * running with
  *   dump1090 --net-sbs-port <port> (default port is 30003)
  *
  */
class AdsbImportActor(val config: Config) extends AdsbImporter {

  override def getCapabilities = super.getCapabilities - SupportsPauseResume - SupportsSimTimeReset

  val host = config.getStringOrElse("host", "localhost")
  val port = config.getIntOrElse("port", 30003)

  var sock: Option[Socket] = None // don't connect yet, server might get launched by actor

  val thread = ThreadUtils.daemon {
    ifSome(sock) { s =>
      val in = new BufferedReader(new InputStreamReader(s.getInputStream()))
      try {
        while (true) {
          val msg = in.readLine()
          publish(msg)
        }
      } catch {
        case x:IOException => // TODO make a periodic reconnect attempt
      }
    }
  }

  override def onInitializeRaceActor(rc: RaceContext, actorConf: Config) = {
    sock = Some(new Socket(host, port))
    super.onInitializeRaceActor(rc, actorConf)
  }

  override def onStartRaceActor(originator: ActorRef) = {
    thread.start
    super.onStartRaceActor(originator)
  }

  override def onTerminateRaceActor(originator: ActorRef) = {
    ifSome(sock) { _.close }
    super.onTerminateRaceActor(originator)
  }
}
