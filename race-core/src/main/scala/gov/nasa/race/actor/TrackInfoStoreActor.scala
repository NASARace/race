/*
 * Copyright (c) 2017, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * The RACE - Runtime for Airspace Concept Evaluation platform is licensed
 * under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.nasa.race.actor

import akka.actor.ActorRef
import com.typesafe.config.Config
import gov.nasa.race._
import gov.nasa.race.core.{BusEvent, ChannelTopicAccept, ChannelTopicRelease, ChannelTopicRequest}
import gov.nasa.race.track._
import gov.nasa.race.core.{ChannelTopicProvider, RaceContext, SubscribingRaceActor}
import gov.nasa.race.config.ConfigUtils._
import scala.collection.mutable.{Set => MSet,Map => MMap}

/**
  * actor that encapsulates a TrackInfoStore which is initialized/updated by means of configured
  * TrackInfoReaders, and on-demand publishes updates for requested tracks
  *
  * note that TrackInfo is not yet a fully functional data type and still might be extended to collect
  * (meta) track information from various sources. This actor just delegates extracting information to
  * message specific readers
  */
class TrackInfoStoreActor (val config: Config) extends ChannelTopicProvider with SubscribingRaceActor {

  // this is an optional channel from which we can read tracks to filter which TrackInfos to generate
  val readTracksFrom = MSet.empty[String] // has to be mutable since it can be remotely initialized
  var relevantTracks: Option[MMap[String,Tracked3dObject]] = None

  val store: TrackInfoStore = createStore
  val readers: Array[TrackInfoReader] = createReaders

  var activeUpdates = Set.empty[String] // the on-demand track ids we publish updates for

  def createStore = new DefaultTrackInfoStore
  def createReaders: Array[TrackInfoReader] = getConfigurables("readers")

  def publishActiveUpdate (tInfo: TrackInfo): Unit =  writeTo.foreach { baseChannel => publish( s"$baseChannel/${tInfo.cs}", tInfo) }

  /**
    * this is called on the results of TrackInfos generated by the reader(s)
    */
  def updateStore (ti: TrackInfo) = {
    val cs = ti.cs

    // note - while we could filter here with "if (readTracksFrom.isEmpty || relevantTracks.contains(cs))"
    // we pass the relevantTracks down into the reader so that it (a) does not create
    // TrackInfos it doesn't need to, and (b) can do more fancy filtering such as position

    store.add(cs, ti)
    if (activeUpdates.contains(cs)) store.get(cs).foreach(publishActiveUpdate)
  }

  override def onInitializeRaceActor(raceContext: RaceContext, actorConf: Config): Boolean = {
    readTracksFrom ++= actorConf.getOptionalStringList("read-tracks-from")

    if (readTracksFrom.nonEmpty) {
      readTracksFrom.foreach { channel => busFor(channel).subscribe(self, channel) }
      if (!relevantTracks.isDefined) relevantTracks = Some(MMap.empty[String,Tracked3dObject])
    }

    readers.foreach { _.initialize(relevantTracks).foreach(updateStore) }

    super.onInitializeRaceActor(raceContext,actorConf)
  }

  override def onTerminateRaceActor(originator: ActorRef) = {
    readTracksFrom.foreach { channel => busFor(channel).unsubscribe(self,channel) }
    super.onTerminateRaceActor(originator)
  }

  override def handleMessage = {
    case BusEvent(chan: String, track: Tracked3dObject, _) =>
      if (readTracksFrom.contains(chan)) {
        ifSome(relevantTracks) { trackMap =>
          if (track.isDroppedOrCompleted) trackMap -= track.cs
          else trackMap += track.cs -> track
        }
      }

    case BusEvent(_, msg: Any, _) =>
      readers.foreach { r =>
        val tInfos = r.readMessage(msg)
        tInfos.foreach(updateStore)
      }

    case RequestTrackInfo(cs) => // a direct, one-time request
      store.get(cs) match {
        case Some(tInfo) => sender() ! tInfo
        case None => sender() ! NoSuchTrackInfo(cs)
      }
  }

  //--- the ChannelTopicProvider interface

  override def isRequestAccepted (request: ChannelTopicRequest) = {
    request.channelTopic.topic match {
      case Some(TrackInfoUpdateRequest(cs)) => true
      case _ => false
    }
  }

  override def gotAccept (accept: ChannelTopicAccept) = {
    accept.channelTopic.topic match {
      case Some(TrackInfoUpdateRequest(cs)) =>
        activeUpdates = activeUpdates + cs
        store.get(cs).foreach(publishActiveUpdate)
      case _ => // ignore
    }
  }

  override def gotRelease (release: ChannelTopicRelease) = {
    release.channelTopic.topic match {
      case rel@Some(TrackInfoUpdateRequest(cs)) =>
        if(!hasClientsForTopic(rel)) activeUpdates = activeUpdates - cs
      case _ => // ignore
    }
  }
}
