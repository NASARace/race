/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.race.track.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** represents the (minimal) state of a track at a given time */
@org.apache.avro.specific.AvroGenerated
public class TrackPoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1193659587964851858L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrackPoint\",\"namespace\":\"gov.nasa.race.track.avro\",\"doc\":\"represents the (minimal) state of a track at a given time\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"identifier for this track\"},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"unix epoch for this track point\",\"units\":\"milliseconds\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"WGS84 latitude of track point\",\"units\":\"degrees\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"WGS84 longitude of track point\",\"units\":\"degrees\"},{\"name\":\"altitude\",\"type\":\"double\",\"doc\":\"(barometric) altitude of track point\",\"units\":\"meters\"},{\"name\":\"speed\",\"type\":\"double\",\"doc\":\"ground speed at track point\",\"units\":\"meters per second\"},{\"name\":\"heading\",\"type\":\"double\",\"doc\":\"heading at track point\",\"units\":\"degrees\"},{\"name\":\"completed\",\"type\":\"boolean\",\"doc\":\"is last track point for this id\"},{\"name\":\"pointnum\",\"type\":\"int\",\"doc\":\"running number of track point for this track\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** identifier for this track */
  @Deprecated public java.lang.CharSequence id;
  /** unix epoch for this track point */
  @Deprecated public long date;
  /** WGS84 latitude of track point */
  @Deprecated public double latitude;
  /** WGS84 longitude of track point */
  @Deprecated public double longitude;
  /** (barometric) altitude of track point */
  @Deprecated public double altitude;
  /** ground speed at track point */
  @Deprecated public double speed;
  /** heading at track point */
  @Deprecated public double heading;
  /** is last track point for this id */
  @Deprecated public boolean completed;
  /** running number of track point for this track */
  @Deprecated public int pointnum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TrackPoint() {}

  /**
   * All-args constructor.
   * @param id identifier for this track
   * @param date unix epoch for this track point
   * @param latitude WGS84 latitude of track point
   * @param longitude WGS84 longitude of track point
   * @param altitude (barometric) altitude of track point
   * @param speed ground speed at track point
   * @param heading heading at track point
   * @param completed is last track point for this id
   * @param pointnum running number of track point for this track
   */
  public TrackPoint(java.lang.CharSequence id, java.lang.Long date, java.lang.Double latitude, java.lang.Double longitude, java.lang.Double altitude, java.lang.Double speed, java.lang.Double heading, java.lang.Boolean completed, java.lang.Integer pointnum) {
    this.id = id;
    this.date = date;
    this.latitude = latitude;
    this.longitude = longitude;
    this.altitude = altitude;
    this.speed = speed;
    this.heading = heading;
    this.completed = completed;
    this.pointnum = pointnum;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return date;
    case 2: return latitude;
    case 3: return longitude;
    case 4: return altitude;
    case 5: return speed;
    case 6: return heading;
    case 7: return completed;
    case 8: return pointnum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: date = (java.lang.Long)value$; break;
    case 2: latitude = (java.lang.Double)value$; break;
    case 3: longitude = (java.lang.Double)value$; break;
    case 4: altitude = (java.lang.Double)value$; break;
    case 5: speed = (java.lang.Double)value$; break;
    case 6: heading = (java.lang.Double)value$; break;
    case 7: completed = (java.lang.Boolean)value$; break;
    case 8: pointnum = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return identifier for this track
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * identifier for this track
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return unix epoch for this track point
   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * unix epoch for this track point
   * @param value the value to set.
   */
  public void setDate(java.lang.Long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return WGS84 latitude of track point
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * WGS84 latitude of track point
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return WGS84 longitude of track point
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * WGS84 longitude of track point
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return (barometric) altitude of track point
   */
  public java.lang.Double getAltitude() {
    return altitude;
  }

  /**
   * Sets the value of the 'altitude' field.
   * (barometric) altitude of track point
   * @param value the value to set.
   */
  public void setAltitude(java.lang.Double value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return ground speed at track point
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * ground speed at track point
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'heading' field.
   * @return heading at track point
   */
  public java.lang.Double getHeading() {
    return heading;
  }

  /**
   * Sets the value of the 'heading' field.
   * heading at track point
   * @param value the value to set.
   */
  public void setHeading(java.lang.Double value) {
    this.heading = value;
  }

  /**
   * Gets the value of the 'completed' field.
   * @return is last track point for this id
   */
  public java.lang.Boolean getCompleted() {
    return completed;
  }

  /**
   * Sets the value of the 'completed' field.
   * is last track point for this id
   * @param value the value to set.
   */
  public void setCompleted(java.lang.Boolean value) {
    this.completed = value;
  }

  /**
   * Gets the value of the 'pointnum' field.
   * @return running number of track point for this track
   */
  public java.lang.Integer getPointnum() {
    return pointnum;
  }

  /**
   * Sets the value of the 'pointnum' field.
   * running number of track point for this track
   * @param value the value to set.
   */
  public void setPointnum(java.lang.Integer value) {
    this.pointnum = value;
  }

  /**
   * Creates a new TrackPoint RecordBuilder.
   * @return A new TrackPoint RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackPoint.Builder newBuilder() {
    return new gov.nasa.race.track.avro.TrackPoint.Builder();
  }

  /**
   * Creates a new TrackPoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TrackPoint RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackPoint.Builder newBuilder(gov.nasa.race.track.avro.TrackPoint.Builder other) {
    return new gov.nasa.race.track.avro.TrackPoint.Builder(other);
  }

  /**
   * Creates a new TrackPoint RecordBuilder by copying an existing TrackPoint instance.
   * @param other The existing instance to copy.
   * @return A new TrackPoint RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackPoint.Builder newBuilder(gov.nasa.race.track.avro.TrackPoint other) {
    return new gov.nasa.race.track.avro.TrackPoint.Builder(other);
  }

  /**
   * RecordBuilder for TrackPoint instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrackPoint>
    implements org.apache.avro.data.RecordBuilder<TrackPoint> {

    /** identifier for this track */
    private java.lang.CharSequence id;
    /** unix epoch for this track point */
    private long date;
    /** WGS84 latitude of track point */
    private double latitude;
    /** WGS84 longitude of track point */
    private double longitude;
    /** (barometric) altitude of track point */
    private double altitude;
    /** ground speed at track point */
    private double speed;
    /** heading at track point */
    private double heading;
    /** is last track point for this id */
    private boolean completed;
    /** running number of track point for this track */
    private int pointnum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.nasa.race.track.avro.TrackPoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altitude)) {
        this.altitude = data().deepCopy(fields()[4].schema(), other.altitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.speed)) {
        this.speed = data().deepCopy(fields()[5].schema(), other.speed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.heading)) {
        this.heading = data().deepCopy(fields()[6].schema(), other.heading);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.completed)) {
        this.completed = data().deepCopy(fields()[7].schema(), other.completed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pointnum)) {
        this.pointnum = data().deepCopy(fields()[8].schema(), other.pointnum);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TrackPoint instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.nasa.race.track.avro.TrackPoint other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altitude)) {
        this.altitude = data().deepCopy(fields()[4].schema(), other.altitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.speed)) {
        this.speed = data().deepCopy(fields()[5].schema(), other.speed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.heading)) {
        this.heading = data().deepCopy(fields()[6].schema(), other.heading);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.completed)) {
        this.completed = data().deepCopy(fields()[7].schema(), other.completed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pointnum)) {
        this.pointnum = data().deepCopy(fields()[8].schema(), other.pointnum);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * identifier for this track
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * identifier for this track
      * @param value The value of 'id'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * identifier for this track
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * identifier for this track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * unix epoch for this track point
      * @return The value.
      */
    public java.lang.Long getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * unix epoch for this track point
      * @param value The value of 'date'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setDate(long value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * unix epoch for this track point
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * unix epoch for this track point
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * WGS84 latitude of track point
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * WGS84 latitude of track point
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setLatitude(double value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * WGS84 latitude of track point
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * WGS84 latitude of track point
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearLatitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * WGS84 longitude of track point
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * WGS84 longitude of track point
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setLongitude(double value) {
      validate(fields()[3], value);
      this.longitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * WGS84 longitude of track point
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longitude' field.
      * WGS84 longitude of track point
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearLongitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * (barometric) altitude of track point
      * @return The value.
      */
    public java.lang.Double getAltitude() {
      return altitude;
    }

    /**
      * Sets the value of the 'altitude' field.
      * (barometric) altitude of track point
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setAltitude(double value) {
      validate(fields()[4], value);
      this.altitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * (barometric) altitude of track point
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'altitude' field.
      * (barometric) altitude of track point
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearAltitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * ground speed at track point
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * ground speed at track point
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setSpeed(double value) {
      validate(fields()[5], value);
      this.speed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * ground speed at track point
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'speed' field.
      * ground speed at track point
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearSpeed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'heading' field.
      * heading at track point
      * @return The value.
      */
    public java.lang.Double getHeading() {
      return heading;
    }

    /**
      * Sets the value of the 'heading' field.
      * heading at track point
      * @param value The value of 'heading'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setHeading(double value) {
      validate(fields()[6], value);
      this.heading = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'heading' field has been set.
      * heading at track point
      * @return True if the 'heading' field has been set, false otherwise.
      */
    public boolean hasHeading() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'heading' field.
      * heading at track point
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearHeading() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'completed' field.
      * is last track point for this id
      * @return The value.
      */
    public java.lang.Boolean getCompleted() {
      return completed;
    }

    /**
      * Sets the value of the 'completed' field.
      * is last track point for this id
      * @param value The value of 'completed'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setCompleted(boolean value) {
      validate(fields()[7], value);
      this.completed = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'completed' field has been set.
      * is last track point for this id
      * @return True if the 'completed' field has been set, false otherwise.
      */
    public boolean hasCompleted() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'completed' field.
      * is last track point for this id
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearCompleted() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'pointnum' field.
      * running number of track point for this track
      * @return The value.
      */
    public java.lang.Integer getPointnum() {
      return pointnum;
    }

    /**
      * Sets the value of the 'pointnum' field.
      * running number of track point for this track
      * @param value The value of 'pointnum'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder setPointnum(int value) {
      validate(fields()[8], value);
      this.pointnum = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'pointnum' field has been set.
      * running number of track point for this track
      * @return True if the 'pointnum' field has been set, false otherwise.
      */
    public boolean hasPointnum() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'pointnum' field.
      * running number of track point for this track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackPoint.Builder clearPointnum() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public TrackPoint build() {
      try {
        TrackPoint record = new TrackPoint();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.Long) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.Double) defaultValue(fields()[2]);
        record.longitude = fieldSetFlags()[3] ? this.longitude : (java.lang.Double) defaultValue(fields()[3]);
        record.altitude = fieldSetFlags()[4] ? this.altitude : (java.lang.Double) defaultValue(fields()[4]);
        record.speed = fieldSetFlags()[5] ? this.speed : (java.lang.Double) defaultValue(fields()[5]);
        record.heading = fieldSetFlags()[6] ? this.heading : (java.lang.Double) defaultValue(fields()[6]);
        record.completed = fieldSetFlags()[7] ? this.completed : (java.lang.Boolean) defaultValue(fields()[7]);
        record.pointnum = fieldSetFlags()[8] ? this.pointnum : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
