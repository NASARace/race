/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.race.track.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** planned (meta) information about tracks */
@org.apache.avro.specific.AvroGenerated
public class TrackInfoRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7269028248171785583L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrackInfoRecord\",\"namespace\":\"gov.nasa.race.track.avro\",\"doc\":\"planned (meta) information about tracks\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"identifier for this track\"},{\"name\":\"cs\",\"type\":\"string\",\"doc\":\"call sign (global ID) for this track\"},{\"name\":\"category\",\"type\":\"string\",\"doc\":\"track category, such as aircraft,ship,vehicle etc.\"},{\"name\":\"vehicle_type\",\"type\":[\"string\",\"null\"],\"doc\":\"optional type of track (e.g. aircraft type)\"},{\"name\":\"departure_point\",\"type\":\"string\",\"doc\":\"name/id of departure location\"},{\"name\":\"etd\",\"type\":\"long\",\"doc\":\"epoch value of estimated time of departure\"},{\"name\":\"arrival_point\",\"type\":\"string\",\"doc\":\"name/id of arrival location\"},{\"name\":\"eta\",\"type\":\"long\",\"doc\":\"epoch value of estimated time of arrival\"},{\"name\":\"planned_route\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TrackRoutePoint\",\"fields\":[{\"name\":\"date\",\"type\":\"long\",\"doc\":\"unix epoch for this track point\",\"units\":\"milliseconds\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"WGS84 latitude of track point\",\"units\":\"degrees\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"WGS84 longitude of track point\",\"units\":\"degrees\"},{\"name\":\"altitude\",\"type\":\"double\",\"doc\":\"(barometric) altitude of track point\",\"units\":\"meters\"}]}},\"doc\":\"optional planned route for track\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** identifier for this track */
  @Deprecated public java.lang.CharSequence id;
  /** call sign (global ID) for this track */
  @Deprecated public java.lang.CharSequence cs;
  /** track category, such as aircraft,ship,vehicle etc. */
  @Deprecated public java.lang.CharSequence category;
  /** optional type of track (e.g. aircraft type) */
  @Deprecated public java.lang.CharSequence vehicle_type;
  /** name/id of departure location */
  @Deprecated public java.lang.CharSequence departure_point;
  /** epoch value of estimated time of departure */
  @Deprecated public long etd;
  /** name/id of arrival location */
  @Deprecated public java.lang.CharSequence arrival_point;
  /** epoch value of estimated time of arrival */
  @Deprecated public long eta;
  /** optional planned route for track */
  @Deprecated public java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> planned_route;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TrackInfoRecord() {}

  /**
   * All-args constructor.
   * @param id identifier for this track
   * @param cs call sign (global ID) for this track
   * @param category track category, such as aircraft,ship,vehicle etc.
   * @param vehicle_type optional type of track (e.g. aircraft type)
   * @param departure_point name/id of departure location
   * @param etd epoch value of estimated time of departure
   * @param arrival_point name/id of arrival location
   * @param eta epoch value of estimated time of arrival
   * @param planned_route optional planned route for track
   */
  public TrackInfoRecord(java.lang.CharSequence id, java.lang.CharSequence cs, java.lang.CharSequence category, java.lang.CharSequence vehicle_type, java.lang.CharSequence departure_point, java.lang.Long etd, java.lang.CharSequence arrival_point, java.lang.Long eta, java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> planned_route) {
    this.id = id;
    this.cs = cs;
    this.category = category;
    this.vehicle_type = vehicle_type;
    this.departure_point = departure_point;
    this.etd = etd;
    this.arrival_point = arrival_point;
    this.eta = eta;
    this.planned_route = planned_route;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return cs;
    case 2: return category;
    case 3: return vehicle_type;
    case 4: return departure_point;
    case 5: return etd;
    case 6: return arrival_point;
    case 7: return eta;
    case 8: return planned_route;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: cs = (java.lang.CharSequence)value$; break;
    case 2: category = (java.lang.CharSequence)value$; break;
    case 3: vehicle_type = (java.lang.CharSequence)value$; break;
    case 4: departure_point = (java.lang.CharSequence)value$; break;
    case 5: etd = (java.lang.Long)value$; break;
    case 6: arrival_point = (java.lang.CharSequence)value$; break;
    case 7: eta = (java.lang.Long)value$; break;
    case 8: planned_route = (java.util.List<gov.nasa.race.track.avro.TrackRoutePoint>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return identifier for this track
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * identifier for this track
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'cs' field.
   * @return call sign (global ID) for this track
   */
  public java.lang.CharSequence getCs() {
    return cs;
  }

  /**
   * Sets the value of the 'cs' field.
   * call sign (global ID) for this track
   * @param value the value to set.
   */
  public void setCs(java.lang.CharSequence value) {
    this.cs = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return track category, such as aircraft,ship,vehicle etc.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * track category, such as aircraft,ship,vehicle etc.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'vehicle_type' field.
   * @return optional type of track (e.g. aircraft type)
   */
  public java.lang.CharSequence getVehicleType() {
    return vehicle_type;
  }

  /**
   * Sets the value of the 'vehicle_type' field.
   * optional type of track (e.g. aircraft type)
   * @param value the value to set.
   */
  public void setVehicleType(java.lang.CharSequence value) {
    this.vehicle_type = value;
  }

  /**
   * Gets the value of the 'departure_point' field.
   * @return name/id of departure location
   */
  public java.lang.CharSequence getDeparturePoint() {
    return departure_point;
  }

  /**
   * Sets the value of the 'departure_point' field.
   * name/id of departure location
   * @param value the value to set.
   */
  public void setDeparturePoint(java.lang.CharSequence value) {
    this.departure_point = value;
  }

  /**
   * Gets the value of the 'etd' field.
   * @return epoch value of estimated time of departure
   */
  public java.lang.Long getEtd() {
    return etd;
  }

  /**
   * Sets the value of the 'etd' field.
   * epoch value of estimated time of departure
   * @param value the value to set.
   */
  public void setEtd(java.lang.Long value) {
    this.etd = value;
  }

  /**
   * Gets the value of the 'arrival_point' field.
   * @return name/id of arrival location
   */
  public java.lang.CharSequence getArrivalPoint() {
    return arrival_point;
  }

  /**
   * Sets the value of the 'arrival_point' field.
   * name/id of arrival location
   * @param value the value to set.
   */
  public void setArrivalPoint(java.lang.CharSequence value) {
    this.arrival_point = value;
  }

  /**
   * Gets the value of the 'eta' field.
   * @return epoch value of estimated time of arrival
   */
  public java.lang.Long getEta() {
    return eta;
  }

  /**
   * Sets the value of the 'eta' field.
   * epoch value of estimated time of arrival
   * @param value the value to set.
   */
  public void setEta(java.lang.Long value) {
    this.eta = value;
  }

  /**
   * Gets the value of the 'planned_route' field.
   * @return optional planned route for track
   */
  public java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> getPlannedRoute() {
    return planned_route;
  }

  /**
   * Sets the value of the 'planned_route' field.
   * optional planned route for track
   * @param value the value to set.
   */
  public void setPlannedRoute(java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> value) {
    this.planned_route = value;
  }

  /**
   * Creates a new TrackInfoRecord RecordBuilder.
   * @return A new TrackInfoRecord RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackInfoRecord.Builder newBuilder() {
    return new gov.nasa.race.track.avro.TrackInfoRecord.Builder();
  }

  /**
   * Creates a new TrackInfoRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TrackInfoRecord RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackInfoRecord.Builder newBuilder(gov.nasa.race.track.avro.TrackInfoRecord.Builder other) {
    return new gov.nasa.race.track.avro.TrackInfoRecord.Builder(other);
  }

  /**
   * Creates a new TrackInfoRecord RecordBuilder by copying an existing TrackInfoRecord instance.
   * @param other The existing instance to copy.
   * @return A new TrackInfoRecord RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackInfoRecord.Builder newBuilder(gov.nasa.race.track.avro.TrackInfoRecord other) {
    return new gov.nasa.race.track.avro.TrackInfoRecord.Builder(other);
  }

  /**
   * RecordBuilder for TrackInfoRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrackInfoRecord>
    implements org.apache.avro.data.RecordBuilder<TrackInfoRecord> {

    /** identifier for this track */
    private java.lang.CharSequence id;
    /** call sign (global ID) for this track */
    private java.lang.CharSequence cs;
    /** track category, such as aircraft,ship,vehicle etc. */
    private java.lang.CharSequence category;
    /** optional type of track (e.g. aircraft type) */
    private java.lang.CharSequence vehicle_type;
    /** name/id of departure location */
    private java.lang.CharSequence departure_point;
    /** epoch value of estimated time of departure */
    private long etd;
    /** name/id of arrival location */
    private java.lang.CharSequence arrival_point;
    /** epoch value of estimated time of arrival */
    private long eta;
    /** optional planned route for track */
    private java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> planned_route;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.nasa.race.track.avro.TrackInfoRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cs)) {
        this.cs = data().deepCopy(fields()[1].schema(), other.cs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicle_type)) {
        this.vehicle_type = data().deepCopy(fields()[3].schema(), other.vehicle_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.departure_point)) {
        this.departure_point = data().deepCopy(fields()[4].schema(), other.departure_point);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.etd)) {
        this.etd = data().deepCopy(fields()[5].schema(), other.etd);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrival_point)) {
        this.arrival_point = data().deepCopy(fields()[6].schema(), other.arrival_point);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.eta)) {
        this.eta = data().deepCopy(fields()[7].schema(), other.eta);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.planned_route)) {
        this.planned_route = data().deepCopy(fields()[8].schema(), other.planned_route);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TrackInfoRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.nasa.race.track.avro.TrackInfoRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cs)) {
        this.cs = data().deepCopy(fields()[1].schema(), other.cs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicle_type)) {
        this.vehicle_type = data().deepCopy(fields()[3].schema(), other.vehicle_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.departure_point)) {
        this.departure_point = data().deepCopy(fields()[4].schema(), other.departure_point);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.etd)) {
        this.etd = data().deepCopy(fields()[5].schema(), other.etd);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrival_point)) {
        this.arrival_point = data().deepCopy(fields()[6].schema(), other.arrival_point);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.eta)) {
        this.eta = data().deepCopy(fields()[7].schema(), other.eta);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.planned_route)) {
        this.planned_route = data().deepCopy(fields()[8].schema(), other.planned_route);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * identifier for this track
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * identifier for this track
      * @param value The value of 'id'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * identifier for this track
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * identifier for this track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cs' field.
      * call sign (global ID) for this track
      * @return The value.
      */
    public java.lang.CharSequence getCs() {
      return cs;
    }

    /**
      * Sets the value of the 'cs' field.
      * call sign (global ID) for this track
      * @param value The value of 'cs'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setCs(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cs' field has been set.
      * call sign (global ID) for this track
      * @return True if the 'cs' field has been set, false otherwise.
      */
    public boolean hasCs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cs' field.
      * call sign (global ID) for this track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearCs() {
      cs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * track category, such as aircraft,ship,vehicle etc.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * track category, such as aircraft,ship,vehicle etc.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.category = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * track category, such as aircraft,ship,vehicle etc.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'category' field.
      * track category, such as aircraft,ship,vehicle etc.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearCategory() {
      category = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicle_type' field.
      * optional type of track (e.g. aircraft type)
      * @return The value.
      */
    public java.lang.CharSequence getVehicleType() {
      return vehicle_type;
    }

    /**
      * Sets the value of the 'vehicle_type' field.
      * optional type of track (e.g. aircraft type)
      * @param value The value of 'vehicle_type'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setVehicleType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.vehicle_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle_type' field has been set.
      * optional type of track (e.g. aircraft type)
      * @return True if the 'vehicle_type' field has been set, false otherwise.
      */
    public boolean hasVehicleType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vehicle_type' field.
      * optional type of track (e.g. aircraft type)
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearVehicleType() {
      vehicle_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'departure_point' field.
      * name/id of departure location
      * @return The value.
      */
    public java.lang.CharSequence getDeparturePoint() {
      return departure_point;
    }

    /**
      * Sets the value of the 'departure_point' field.
      * name/id of departure location
      * @param value The value of 'departure_point'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setDeparturePoint(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.departure_point = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'departure_point' field has been set.
      * name/id of departure location
      * @return True if the 'departure_point' field has been set, false otherwise.
      */
    public boolean hasDeparturePoint() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'departure_point' field.
      * name/id of departure location
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearDeparturePoint() {
      departure_point = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'etd' field.
      * epoch value of estimated time of departure
      * @return The value.
      */
    public java.lang.Long getEtd() {
      return etd;
    }

    /**
      * Sets the value of the 'etd' field.
      * epoch value of estimated time of departure
      * @param value The value of 'etd'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setEtd(long value) {
      validate(fields()[5], value);
      this.etd = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'etd' field has been set.
      * epoch value of estimated time of departure
      * @return True if the 'etd' field has been set, false otherwise.
      */
    public boolean hasEtd() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'etd' field.
      * epoch value of estimated time of departure
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearEtd() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrival_point' field.
      * name/id of arrival location
      * @return The value.
      */
    public java.lang.CharSequence getArrivalPoint() {
      return arrival_point;
    }

    /**
      * Sets the value of the 'arrival_point' field.
      * name/id of arrival location
      * @param value The value of 'arrival_point'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setArrivalPoint(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.arrival_point = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'arrival_point' field has been set.
      * name/id of arrival location
      * @return True if the 'arrival_point' field has been set, false otherwise.
      */
    public boolean hasArrivalPoint() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'arrival_point' field.
      * name/id of arrival location
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearArrivalPoint() {
      arrival_point = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'eta' field.
      * epoch value of estimated time of arrival
      * @return The value.
      */
    public java.lang.Long getEta() {
      return eta;
    }

    /**
      * Sets the value of the 'eta' field.
      * epoch value of estimated time of arrival
      * @param value The value of 'eta'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setEta(long value) {
      validate(fields()[7], value);
      this.eta = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'eta' field has been set.
      * epoch value of estimated time of arrival
      * @return True if the 'eta' field has been set, false otherwise.
      */
    public boolean hasEta() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'eta' field.
      * epoch value of estimated time of arrival
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearEta() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'planned_route' field.
      * optional planned route for track
      * @return The value.
      */
    public java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> getPlannedRoute() {
      return planned_route;
    }

    /**
      * Sets the value of the 'planned_route' field.
      * optional planned route for track
      * @param value The value of 'planned_route'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder setPlannedRoute(java.util.List<gov.nasa.race.track.avro.TrackRoutePoint> value) {
      validate(fields()[8], value);
      this.planned_route = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'planned_route' field has been set.
      * optional planned route for track
      * @return True if the 'planned_route' field has been set, false otherwise.
      */
    public boolean hasPlannedRoute() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'planned_route' field.
      * optional planned route for track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackInfoRecord.Builder clearPlannedRoute() {
      planned_route = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public TrackInfoRecord build() {
      try {
        TrackInfoRecord record = new TrackInfoRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cs = fieldSetFlags()[1] ? this.cs : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.category = fieldSetFlags()[2] ? this.category : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.vehicle_type = fieldSetFlags()[3] ? this.vehicle_type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.departure_point = fieldSetFlags()[4] ? this.departure_point : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.etd = fieldSetFlags()[5] ? this.etd : (java.lang.Long) defaultValue(fields()[5]);
        record.arrival_point = fieldSetFlags()[6] ? this.arrival_point : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.eta = fieldSetFlags()[7] ? this.eta : (java.lang.Long) defaultValue(fields()[7]);
        record.planned_route = fieldSetFlags()[8] ? this.planned_route : (java.util.List<gov.nasa.race.track.avro.TrackRoutePoint>) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
