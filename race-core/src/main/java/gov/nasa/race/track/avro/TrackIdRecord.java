/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.race.track.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** ThreadedFlight id-to-callsign association */
@org.apache.avro.specific.AvroGenerated
public class TrackIdRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3287861215541354501L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrackIdRecord\",\"namespace\":\"gov.nasa.race.track.avro\",\"doc\":\"ThreadedFlight id-to-callsign association\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"identifier for this track\"},{\"name\":\"cs\",\"type\":\"string\",\"doc\":\"call sign (global ID) for this track\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** identifier for this track */
  @Deprecated public java.lang.CharSequence id;
  /** call sign (global ID) for this track */
  @Deprecated public java.lang.CharSequence cs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TrackIdRecord() {}

  /**
   * All-args constructor.
   * @param id identifier for this track
   * @param cs call sign (global ID) for this track
   */
  public TrackIdRecord(java.lang.CharSequence id, java.lang.CharSequence cs) {
    this.id = id;
    this.cs = cs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return cs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: cs = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return identifier for this track
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * identifier for this track
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'cs' field.
   * @return call sign (global ID) for this track
   */
  public java.lang.CharSequence getCs() {
    return cs;
  }

  /**
   * Sets the value of the 'cs' field.
   * call sign (global ID) for this track
   * @param value the value to set.
   */
  public void setCs(java.lang.CharSequence value) {
    this.cs = value;
  }

  /**
   * Creates a new TrackIdRecord RecordBuilder.
   * @return A new TrackIdRecord RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackIdRecord.Builder newBuilder() {
    return new gov.nasa.race.track.avro.TrackIdRecord.Builder();
  }

  /**
   * Creates a new TrackIdRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TrackIdRecord RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackIdRecord.Builder newBuilder(gov.nasa.race.track.avro.TrackIdRecord.Builder other) {
    return new gov.nasa.race.track.avro.TrackIdRecord.Builder(other);
  }

  /**
   * Creates a new TrackIdRecord RecordBuilder by copying an existing TrackIdRecord instance.
   * @param other The existing instance to copy.
   * @return A new TrackIdRecord RecordBuilder
   */
  public static gov.nasa.race.track.avro.TrackIdRecord.Builder newBuilder(gov.nasa.race.track.avro.TrackIdRecord other) {
    return new gov.nasa.race.track.avro.TrackIdRecord.Builder(other);
  }

  /**
   * RecordBuilder for TrackIdRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrackIdRecord>
    implements org.apache.avro.data.RecordBuilder<TrackIdRecord> {

    /** identifier for this track */
    private java.lang.CharSequence id;
    /** call sign (global ID) for this track */
    private java.lang.CharSequence cs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.nasa.race.track.avro.TrackIdRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cs)) {
        this.cs = data().deepCopy(fields()[1].schema(), other.cs);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TrackIdRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.nasa.race.track.avro.TrackIdRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cs)) {
        this.cs = data().deepCopy(fields()[1].schema(), other.cs);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * identifier for this track
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * identifier for this track
      * @param value The value of 'id'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackIdRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * identifier for this track
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * identifier for this track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackIdRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cs' field.
      * call sign (global ID) for this track
      * @return The value.
      */
    public java.lang.CharSequence getCs() {
      return cs;
    }

    /**
      * Sets the value of the 'cs' field.
      * call sign (global ID) for this track
      * @param value The value of 'cs'.
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackIdRecord.Builder setCs(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cs' field has been set.
      * call sign (global ID) for this track
      * @return True if the 'cs' field has been set, false otherwise.
      */
    public boolean hasCs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cs' field.
      * call sign (global ID) for this track
      * @return This builder.
      */
    public gov.nasa.race.track.avro.TrackIdRecord.Builder clearCs() {
      cs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TrackIdRecord build() {
      try {
        TrackIdRecord record = new TrackIdRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cs = fieldSetFlags()[1] ? this.cs : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
