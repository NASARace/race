import * as config from "./config.js"; // generated by scala
import * as ws from "./ws.js";
import * as util from "./ui_util.js";
import * as ui from "./ui.js";
import * as uiCesium from "./ui_cesium.js";

class SourceEntry {
    constructor(source) {
        this.source = source;
        this.show = false;
        this.dataSource = undefined;
    }
}

class SmokeEntry {
}

var sources = []; // will be populated by getLayers messages
var sourceView = undefined;
var objectView = undefined;
var defaultRender = config.smokelayer.contourRender;

const renderModules = new Map();
var defaultRenderFunc = undefined;

initWindow();

//uiCesium.setEntitySelectionHandler(smokeLayerSelection);
ws.addWsHandler(handleWsSmokeLayerMessages); // filters out other

//if (config.smokelayer.render) processRenderOpts(config.smokelayer.render);

uiCesium.initLayerPanel("smokelayer", config.smokelayer, showSmokeLayer);
console.log("ui_cesium_smokelayer initialized");

//--- end module init

function initWindow() {
    createIcon();
    createWindow();
//
//    entryView = initEntryView();
//    objectView = ui.getKvTable("smokelayer.object");
}

//ui.registerLoadFunction(function initialize() {
//    sourceView = initSourceView();
//    objectView = ui.getKvTable("smokelayer.object");
//
//    uiCesium.setEntitySelectionHandler(smokeLayerSelection);
//    ws.addWsHandler(handleWsSmokeLayerMessages); // filters out other
//
//    if (config.geolayer.render) processRenderOpts(config.smokelayer.render);
//
//    uiCesium.initLayerPanel("smoke", config.smokelayer, showSmokeLayer);
//    console.log("ui_cesium_smokelayer initialized");
//});

function createIcon() {
    return ui.Icon("smoke-icon.svg", (e)=> ui.toggleWindow(e,'smoke'));
}

function initEntryView() {
    let view = ui.getList("smokelayer.entries");
    if (view) {
        ui.setListItemDisplayColumns(view, ["header"], [
            { name: "date", width: "8rem", attrs: ["fixed", "alignRight"], map: e => util.toLocalDateString(e.source.date)},
            { name: "objs", tip: "number of loaded objects", width: "5rem", attrs: ["fixed", "alignRight"], map: e => e.nEntities ? e.nEntities : ""},
            ui.listItemSpacerColumn(),
            { name: "show", tip: "toggle visibility", width: "2.1rem", attrs: [], map: e => ui.createCheckBox(e.show, toggleShowSource) }
        ]);
    }
    return view;
}

function createWindow() {
    return ui.Window("Smoke and Cloud", "smoke", "smoke-icon.svg")(
        ui.Panel("Smoke Contour Display")(
                ui.Slider("stroke width", "smoke.contour.stroke_width", contourStrokeWidthChanged),
                ui.ColorField("stroke color", "smoke.contour.stroke_color", true, contourStrokeColorChanged),
                ui.ColorField("p<0.2", "smoke.contour.color0", true, contourFillColorChanged),
                ui.ColorField("0.2<p<0.4", "smoke.contour.color1", true, contourFillColorChanged),
                ui.ColorField("0.4<p<0.6", "smoke.contour.color2", true, contourFillColorChanged),
                ui.ColorField("0.6<p<0.8", "smoke.contour.color3", true, contourFillColorChanged),
                ui.ColorField("0.8<p", "smoke.contour.color4", true, contourFillColorChanged)
        ),
        ui.Panel("Cloud Contour Display")(
                ui.Slider("stroke width", "smoke.contour.stroke_width", contourStrokeWidthChanged),
                ui.ColorField("stroke color", "smoke.contour.stroke_color", true, contourStrokeColorChanged),
                ui.ColorField("p<0.2", "smoke.contour.color0", true, contourFillColorChanged),
                ui.ColorField("0.2<p<0.4", "smoke.contour.color1", true, contourFillColorChanged),
                ui.ColorField("0.4<p<0.6", "smoke.contour.color2", true, contourFillColorChanged),
                ui.ColorField("0.6<p<0.8", "smoke.contour.color3", true, contourFillColorChanged),
                ui.ColorField("0.8<p", "smoke.contour.color4", true, contourFillColorChanged)
        ),
    );
 }

 function initContourDisplayControls() {
     var e = undefined;

     e = ui.getSlider("smoke.contour.stroke_width");
     ui.setSliderRange(e, 0, 3, 0.5);
     ui.setSliderValue(e, defaultContourRender.strokeWidth);

     e = ui.getField("smoke.contour.stroke_color");
     ui.setField(e, defaultContourRender.strokeColor.toCssHexString());

     for (var i = 0; i<defaultContourRender.fillColors.length; i++) {
         e = ui.getField(`wind.contour.color${i}`);
         if (e) {
             ui.setField(e, defaultContourRender.fillColors[i].toCssHexString());
         }
     }
 }

function showSmokeLayer(cond) {
    sources.forEach( src=> {
        if (src.dataSource) src.dataSource.show = cond;
    });
    uiCesium.requestRender();
}

async function loadSource(sourceEntry) {
    let url = "smokelayer-data/" + sourceEntry.source.pathName;

    fetch(url).then( (response) => {
        if (response.ok) {
            let data = response.json();
            if (data) {
                let renderOpts = collectRenderOpts(sourceEntry);
                Cesium.GeoJsonDataSource.load(data, renderOpts).then( (ds) => {
                    ds.show = true;
                    sourceEntry.dataSource = ds;
                    postProcessDataSource(sourceEntry, renderOpts);
                    sourceEntry.nEntities = ds.entities.values.length;
                    ui.updateListItem(sourceView, sourceEntry);

                    uiCesium.addDataSource(ds);

                    console.log("loaded ", url);
                    setTimeout( () => { uiCesium.requestRender(); }, 500);  // not showing if immediate request ?
                });
            } else console.log("no data for request: ", url);
        } else console.log("request failed: ", url);
    }, (reason) => console.log("failed to retrieve: ", url, ", reason: ", reason));
}

// websocket messages
function smokeLayerSelection() {}

function handleWsSmokeLayerMessages(msgType, msg) {
    switch (msgType) {
        case "smokeLayer":
            handleSmokeLayerMessage(msg.smokeLayer);
            return true;
        default:
            return false;
        }
}

function handleSmokeLayerMessage(smokeLayer) {
    let se = SmokeEntry.create(smokeLayer);
    smokeEntries.set(smokeLayer.url, we);
}