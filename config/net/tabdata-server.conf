// example of a site route with websocket to updaate dynamic data
//      open browser on url http://localhost:8080/tabdata

name = "tabdata-server"
show-exceptions = true

actors = [
  {
    name = "deviceServer"
    class = "gov.nasa.race.http.HttpServer"

    host = "localhost"
    port = "8080"
    interface = "0.0.0.0" // default

    //log-incoming = true

    ws-keep-alive = 30s

    routes = [
      {
        name = "tabdata"
        class = "gov.nasa.race.http.tabdata.DeviceServerRoute"

        //--- where the static content is located (index.html etc)
        site-root = "race-net-http/src/resources/sites/tabdata"
        //request-prefix = "tabdata"  // defaults to name

        user-permissions = "race-net-http-test/src/resources/sites/tabdata/data/userPermissions.json"

        //--- our connection to the rest of the actor system / the outside
        write-to = "/service/requests"
        read-from = "/service/updates" // where we get push data model changes from
      }
    ]
  },

  {
    name = "tabdataService"
    class = "gov.nasa.race.http.tabdata.TabDataServiceActor"

    node-id = "provider_2" // our own site name

    field-catalog = "race-net-http-test/src/resources/sites/tabdata/data/fieldCatalog.json"
    provider-catalog = "race-net-http-test/src/resources/sites/tabdata/data/providerCatalog.json"
    provider-data = "race-net-http-test/src/resources/sites/tabdata/data"

    read-from = "/service/requests"
    write-to = "/service/updates"
  }
]

include classpath("config/logging-race.conf")