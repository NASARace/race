// example of single node share server for (web browser) user clients
//      open browser on url http://localhost:8082/share

name = "share-single"
show-exceptions = true

site.dir = "race-share/src/main/resources"
data.dir = "race-share-test/src/resources/data/node_2"

actors = [
  {
    name = "userServer"
    class = "gov.nasa.race.http.HttpServer"

    port = "8082"

    //log-incoming = true

    ws-keep-alive = 30s

    use-https = true
    server-keystore = "race-net-http-test/src/resources/localhost.jks" // this would normally go into the vault
    server-keystore-pw = "wz3YEbokEb" // this would normally go into the vault

    routes = [
      {
        name = "userRoute"
        class = "gov.nasa.race.share.UserServerRoute"

        //--- where the static content is located (index.html etc)
        site-root = ${site.dir}
        request-prefix = "share"  // defaults to name
        clamp-user = false

        __auth = { // password auth for the websocket
          class = ".http.PwAuthMethod"
          users = ${data.dir}"/passwd" // this would normally go into the vault
        }

        auth = { // password-less auth
          class = ".http.webauthn.WebAuthnMethod"  // use W3C WebAuthn for password-less user auth
          user-credentials = ${data.dir}"/userCredentials.json"

          registration = { // we only allow registration from localhost
            host-filter = "loopback"
            client-filter = "loopback"
          }

          authentication = { // authentication is allowed from any machine that can connect to the server
            host-filter = "all"
            client-filter = "all"
          }
        }

        // noAuth would not work here since we require permissions

        user-permissions = ${data.dir}"/userPermissions.json"
        edit-timeout = 1m // timeout for inactive edit sessions

        write-to = "/share/in"
        read-from = "/share/out"
      }
    ]

    //loglevel = "info"
  },

  {
    name = "updater"
    class = "gov.nasa.race.share.UpdateActor"

    node-list = ${data.dir}"/nodeList.json"
    row-list = ${data.dir}"/rowList.json"
    column-list = ${data.dir}"/columnList.json"

    value-formulas = ${data.dir}"/formulaList.json"
    constraint-formulas = ${data.dir}"/constraintList.json"

    data-dir = ${data.dir}

    read-from = "/share/in"
    write-to = "/share/out"
  }
]

include classpath("config/logging-race.conf")