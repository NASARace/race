// example of a terminal share provider node that is connected to an upstream integrator
//     open browser on url http://localhost:8082/share
// upstream server can be started with share-integrator.conf

name = "share-node_2"
show-exceptions = true

node     = "node_2"
site.dir = "race-share/src/main/resources"
data.dir = "race-share-test/src/resources/data/"${node}

// demo app menu to simulate upstream connection loss
menu = [
  { key = "1"
    text = "show online nodes"
    actor = "updater"
    msg = "showOnlineNodes"
  },
  { key = "2"
    text = "show column data"
    actor = "updater"
    msg = "showColumnData"
  },
  { key = "3"
    text = "cut connection"
    actor = "upstreamConnector"
    msg = "cut"
  },
  { key = "4"
    text = "restore connection"
    actor = "upstreamConnector"
    msg = "restore"
  }
]

actors = [
  {
    name = "upstreamConnector"
    class = "gov.nasa.race.share.UpstreamConnectorActor"

    // FIXME - this should work pw-less
    uid = ${node}  // normally from vault
    pw = "supersecret" // - " -

    sim-mode = true // do we support simulating connection loss

    read-from = "/share/out"  // what we send to upstream
    write-to = "/share/in" // what we receive from upstream
  },

  {
    name = "userServer"
    class = "gov.nasa.race.http.HttpServer"

    port = "8002"

    //log-incoming = true

    ws-keep-alive = 30s
    use-https = true
    server-keystore = "race-net-http-test/src/resources/localhost.jks" // this would normally go into the vault
    server-keystore-pw = "wz3YEbokEb" // this would normally go into the vault

    routes = [
      {
        name = "userRoute"
        class = "gov.nasa.race.share.UserServerRoute"

        //--- where the static content is located (index.html etc)
        site-root = ${site.dir}
        request-prefix = "share"  // defaults to name

        auth = {
          class = ".http.NoAuthMethod"
        }
        __auth = { // password auth for the websocket
          class = ".http.PwAuthMethod"
          users = ${data.dir}"/passwd" // this would normally go into the vault
        }
        __auth = { // password-less auth
          class = ".http.webauthn.WebAuthnMethod"  // use W3C WebAuthn for password-less user auth
          user-credentials = ${data.dir}"/userCredentials.json"

          registration = { // we only allow registration from localhost
            host-filter = "loopback"
            client-filter = "loopback"
          }

          authentication = { // authentication is allowed from any machine that can connect to the server
            host-filter = "all"
            client-filter = "all"
          }
        }

        user-permissions = ${data.dir}"/userPermissions.json"
        edit-timeout = 5m // timeout for inactive edit sessions

        write-to = "/share/in"
        read-from = "/share/out"
      }
    ]

    //loglevel = "info"
  },

  {
    name = "updater"
    class = "gov.nasa.race.share.UpdateActor"

    node-list = ${data.dir}"/nodeList.json"
    row-list = ${data.dir}"/rowList.json"
    column-list = ${data.dir}"/columnList.json"

    value-formulas = ${data.dir}"/formulaList.json"
    constraint-formulas = ${data.dir}"/constraintList.json"

    data-dir = ${data.dir}

    read-from = "/share/in"
    write-to = "/share/out"
  }
]

include classpath("config/logging-race.conf")

