name = "smoke_CZU_demo"
cache.dir = "../cache"
data.dir = "../race-data/"
show-exceptions = true
start-time = "2020-08-19T14:57:00PST"
#start-time = "2020-08-16T00:00:00.005Z"
#time-scale = 100  #fast-forwarding ...
archive-g17 = ${data.dir}"/odin-czu-081620/OR_ABI-L2-FDCC-G17_s20200816-050412_e20200823-055910.csv.gz"
archive-g16 = ${data.dir}"/odin-czu-081620/OR_ABI-L2-FDCC-G16_s20200816-100421_e20200824-000001.csv.gz"

include "./map-imglayer.conf"  // defines the global 'imagery' (workaround for Config parser limitations)

actors = [
  { name = "smokeSegmentationActor"
    class = ".earth.actor.SmokeSegmentationImportActor"
    write-to = "/smoke"
    read-from = "/goes-r-images"
    api-port = "http://localhost:5000/predict"
    api-exe = "race-earth/src/main/python/smoke-segmentation/api_tif.py"
    api-cwd = "race-earth/src/main/python/smoke-segmentation"
    data-dir = ${data.dir}"/smoke-segmentation"
    python-exe = ${user.home}"/Anaconda3/envs/odin/python.exe" // python executable with gdal2tiles and gdal installed
    gdal2tiles-driver = "race-earth/src/main/python/gdal2tiles/gdal2tiles-driver.py"
    archive = "false"
    gdal-contour = ${user.home}"/Anaconda3/envs/gdal/Library/bin/gdal_contour.exe"
  }
  {
    name = "SmokeProbe"
    class = "gov.nasa.race.actor.ProbeActor"
    read-from = "/smoke"
  }
  {
    name = "goesTrueColorReplayer"
    class = ".earth.actor.GoesTrueColorReplayActor"
    directory =  ${data.dir}"/goesr-truecolor/CZU-mini-demo"
    write-to = "/goes-r-images"
    file-pattern = ".*\\.tif"
  },
  {
      name = "ReplayerProbe"
      class = "gov.nasa.race.actor.ProbeActor"
      read-from = "/goes-r-images"
    }
  {
      name = "httpServer"
      class = "gov.nasa.race.http.HttpServer"

      host = "localhost"
      port = "9000"
      //log-incoming = true

      ws-keep-alive = 30s

      routes = [
        { // name is used as default if request-prefix is not specified
          name = "smoke"
          class = "gov.nasa.race.cesium.CesiumSmokeApp"
          access-token = "??cesium.access-token" // not required for this demo

          read-from = ["/smoke"]

          cache-dir = ${cache.dir} // for general proxied requests
          request-render = true
          resource-map = "../resources.txt" // only for development/debugging
          smokelayer = {
            contour.render = {
                      stroke-color = "grey"
                      stroke-width = 2.0
                      // fill-color = ["ffffff", "bfbfbf", "808080", "404040", "000000"]
                    }
          }

          imglayer = {

                      sources = [
                        {
                          pathname = "globe/natgeo"
                          info = "ArcGIS NatGeo Terrain"
                          url = "https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/"
                          exclusive = ["globe"]
                          provider-class = ".cesium.ArcGisMapServerImageryProvider"
                          proxy = true
                          show = true
                          render { brightness = 0.6 }
                        },
                        {
                          pathname = "globe/bing-aerial",
                          info = "Bing aerial default",
                          url = ""
                          provider-class = ".cesium.DefaultImageryProvider",
                          exclusive = ["globe"]
                          render = {
                            brightness = 1.0
                            contrast = 1.0
                            hue = 0.0
                          }
                        },
                        {
                          pathname = "globe/stamen-terrain"
                          info = "Stamen Terrain"
                          url = "http://tile.stamen.com/terrain/"
                          provider-class = ".cesium.OpenStreetMapImageryProvider"
                          exclusive = ["globe"]
                          proxy = true
                          //show = true
                          render { brightness = 0.6 }
                        }
                        ]
                        }

          eye = {
                    lon = -122.4
                    lat = 37.6
                    alt = 150000
                  }
            }
          ]

    }
]
include classpath("config/http-race.conf")
include classpath("config/logging-race.conf")