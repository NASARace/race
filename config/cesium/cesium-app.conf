name = "cesium-app"

// override with -Darchive=... from command line

start-time = "2022-03-28T00:05:00Z"

data.dir = "../data/odin-032722"
archive.sbs = ${data.dir}"/sbs.txt.gz"
archive.gps = ${data.dir}"/gps.csv"
archive.sentinel = ${data.dir}"/sentinel.ta.gz"

cache.dir = ${user.home}"/cache"
wind.dir = "../data"

actors = [
  {
    name = "httpServer"
    class = "gov.nasa.race.http.HttpServer"

    host = "localhost"
    port = "9000"
    //log-incoming = true

    ws-keep-alive = 30s

    routes = [
      { // name is used as default if request-prefix is not specified
        name = "app"
        class = "gov.nasa.race.cesium.CesiumApp"
        access-token = "??cesium.access-token"

        read-from = ["/sbs", "/gps", "/sim", "/sentinel"]

        // resource origins and cache dirs
        cesium-cache = ${cache.dir}"/cesium/current"

        cache-dir = ${cache.dir} // for general proxied requests

        proxy-maptile-provider = true
        //maptile-provider = "http://tile.stamen.com/terrain"
        maptile-provider = "https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/"
        maptile-brightness = 0.5

        imagery-layers = [
          { name="arcgis-NatGeo"
            url="https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/"
            provider="""new Cesium.ArcGisMapServerImageryProvider({url:"$URL"})"""
            descr="ArcGIS Terrain"
            base=true, proxy=true, show=true
          },
          { name="<default>", url="",
            provider="null",
            descr="Bing aerial default",
            base=true, proxy=false, show=false,
            contrast = 1.0, brightness = 1.0
          },
          { name="Stamen-terrain"
            url="http://tile.stamen.com/terrain/"
            provider="""new Cesium.OpenStreetMapImageryProvider({url:"$URL"})"""
            descr="Stamen Terrain"
            base=true, proxy=true, show=false
          },
          { name= "goes_conus_ir",
            url="https://mesonet.agron.iastate.edu/cgi-bin/wms/goes/conus_ir.cgi",
            provider="""new Cesium.WebMapServiceImageryProvider({
                url:"$URL?",
                layers: "goes_conus_ir",
                credit: "Infrared data courtesy Iowa Environmental Mesonet",
                parameters: {transparent: "true",format: "image/png"}
            })""",
            descr="GOES conus infrared",
            alpha=0.3
            proxy=false, show=false
          },
          { name="nexrad",
            url="https://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
            provider="""new Cesium.WebMapServiceImageryProvider({
                url:'$URL?',
                layers:"nexrad-n0r",
                credit:"Radar data courtesy Iowa Environmental Mesonet",
                parameters: {transparent: "true",format: "image/png"}
            })""",
            descr="NEXRAD precipitation"
            alpha=0.3
            proxy=false, show=false
          },
          //{ name="counties",
          //  url="https://www.mesonet.agron.iastate.edu/uscounties/",
          //  provider="""new Cesium.TileMapServiceImageryProvider({
          //      url: Cesium.buildModuleUrl("$URL"),
          //  })""",
          //  descr="US county boundaries"
          //}
        ]

        proxy-elevation-provider = true
        elevation-provider = "https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer"

        channel-map = ["/sbs: ads-b", "/sim: drone", "/gps: ground"]
        track-colors = ["ads-b: yellow", "drone: cyan", "ground: red"]
        track-assets = [ "model: generic_track.glb", "marker: triangle-point.png" ] // sent as key list, referenced in serialized tracks

        layers = [
          { name = "modis_24"
            url = "https://firms.modaps.eosdis.nasa.gov/usfs/api/kml_fire_footprints/usa_contiguous_and_hawaii/24h/c6.1/FirespotArea_usa_contiguous_and_hawaii_c6.1_24h.kmz"
          },
          { name = "viirs_24_s-npp"
            url = "https://firms.modaps.eosdis.nasa.gov/usfs/api/kml_fire_footprints/usa_contiguous_and_hawaii/24h/suomi-npp-viirs-c2/FirespotArea_usa_contiguous_and_hawaii_suomi-npp-viirs-c2_24h.kmz",
          },
          { name = "viirs_24_noaa"
            url = "https://firms.modaps.eosdis.nasa.gov/usfs/api/kml_fire_footprints/usa_contiguous_and_hawaii/24h/noaa-20-viirs-c2/FirespotArea_usa_contiguous_and_hawaii_noaa-20-viirs-c2_24h.kmz"
          },
          { name = "wfas-cur"
            url = "http://wfas.net/google-earth/wfas_nfdr.kmz"
          },
          { name = "wfas-fcst"
            url = "http://wfas.net/google-earth/wfas_fcst.kmz"
          },
          {
            name = "prescribed"
            url = "https://ssl.arb.ca.gov/pfirs/firm/kml/rx4.php?s=all"
          },
          {
            name = "CA_powerline"
            url = "https://cecgis-caenergy.opendata.arcgis.com/datasets/CAEnergy::california-electric-transmission-lines.geojson"
            //--- GeoJSON rendering parameters
            clamp-to-ground = true
            stroke-color = "hotpink"
            stroke-width = 2
            fill-color = "pink"
            marker-symbol = "circle" // MAKI symbol name
            marker-size = 20
          }
        ]

        wind-dir = ${wind.dir}
        wind-fields = [
          { name = "NOAA_surface"
            url = "wind-data/noaa/noaa-wind-demo.nc"
          }
        ]

        eye = {
          lon = -122.4
          lat = 37.6
          alt = 150000
        }
      }
    ]
  },
  {
    name = "simulator"
    class = ".air.actor.SimpleAircraft"
    tick-interval = 5s
    write-to = "/sim"

    id = "557902201"
    cs = "XY333"
    lat = 37.246822
    lon = -121.9770277
    altitude-ft = 1000
    heading = 0
    speed-kn = 100.0
  },
  { name = "gpsReplay"
    class = ".land.actor.GpsPosReplayActor"
    write-to = "/gps"

    //can-reset-clock = true

    pathname = ${archive.gps}
    buffer-size = 4096
  },
  {
    name = "sbsReplay"
    class = ".air.actor.SbsReplayActor"
    write-to = "/sbs"

    //can-reset-clock = true
    drop-after = "15 seconds"    // if set, check for dropped flights

    pathname = ${archive.sbs}
    buffer-size = 32768
  }
]

include classpath("config/http-race.conf")
include classpath("config/logging-race.conf")
