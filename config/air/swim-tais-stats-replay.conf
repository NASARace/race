name = "swim-tais-stats-replay"
race.host = "localhost"

actors = [
  { // import/replay
    name = "taisReplayer"
    class = ".actor.ReplayActor"
    reader = {
      class = ".archive.TaggedStringArchiveReader"
      pathname = ${archive}
      publish-raw = true
      buffer-size = 32768
    }
    write-to = "/swim/tais"
    can-reset-clock = true
  },

  { // msg translator
    name = "tais2Tracks"
    class = ".actor.TranslatorActor"
    read-from = "/swim/tais"
    write-to = "/tracks"
    translator = {
      class = ".air.translator.TATrackAndFlightPlanParser"
    }
  },

  { // message stats
    name = "msgStats"
    class = ".actor.XmlMsgStatsCollector"
    read-from = "/swim/tais"
    write-to = "/stats"
    title = "1. Valid TAIS Message Statistics"
    paths = [
      "**/record/track",
      "**/record/flightPlan"
    ]
  },
  { // message duplication stats
    name = "dupChecker"
    class = ".actor.DuplicatedMsgDetector"
    read-from = "/swim/tais"
    write-to = "/stats"
    title = "2. Duplicated TAIS Message Statistics"
  },

  {
    name = "trackStats"
    class = ".air.actor.TATrackStatsCollector"
    read-from = "/tracks"
    write-to = "/stats"
    drop-after = "3 minutes"
    title = "3. TAIS Track Statistics"

    max-clock-diff = "3 minutes"
    bucket-count = 1
    settle-time = "30 seconds"
  },

  //--- reporting

  // serves on http://localhost:8080/race/statistics
  {
    name = "httpServer"
    class = "gov.nasa.race.http.HttpServer"
    host = ${race.host}
    port = "9100"
    routes = [
      { name = "statsReporter"
        class = "gov.nasa.race.http.HttpStatsReporter"
        read-from = "/stats"
        refresh = 10s
        formatters = [
          { class = "gov.nasa.race.http.HtmlMessageStatsFormatter" },
          { class = "gov.nasa.race.air.actor.HtmlTATrackStatsFormatter" }
        ]
      }
    ]
  },
  {
    name = "statsConsole"
    class = ".actor.ConsoleStatsReporter"
    read-from = "/stats"
  }
  // { name = "statsXMLWriter"
  //   class = ".actor.XMLStatsReporter"
  //   read-from = "/stats"
  //   pathname = ${race.data}"/"${race.date}"/stats.xml"
  //   prettify = true
  // },
//  { name = "statsTextWriter"
//    class = ".actor.FileStatsReporter"
//    read-from = "/stats"
//    pathname = ${race.data}"/"${race.date}"/stats.txt"
//    formatters = [
//      { class = ".air.actor.TATrackStatsFormatter" }
//    ]
//  }
]

include classpath("config/logging-race.conf")
