// TAIS statistics without XML verification
name = "swim-tais-stats-raw"

race.data = "tmp"

actors = [
  { name = "portMapper"
    class = ".actor.PortForwarder"
    user = "??gw.user"
    host = "??gw.host"
    forward = "??gw.forward"
  },
  { name = "taisImporter"
    class = ".jms.JMSImportActor"  // don't use the .air.actor.TAISImportActor which is a ChannelTopicProvider
    broker-uri = "??swim.uri.tais"
    user = "??swim.user"
    pw = "??swim.pw"
    write-to = "/swim/tais"
    jms-topic = "nasa.topic08.tais"
  },

  { name = "taisMsgStatsCollector"
    class = ".actor.XmlMsgStatsCollector"
    read-from = "/swim/tais"
    write-to = "/stats"
    title = "1. TAIS Message Statistics"
    paths = [
      "**/record/track",
      "**/record/flightPlan"
    ]
  },

  //--- lexically duplicated message check
  { name = "dupChecker"
    class = ".actor.DuplicatedMsgDetector"
    read-from = "/swim/tais"
    write-to = "/stats"
    title = "3. Duplicated TAIS Message Statistics"
  },

  //--- TATrackAndFlightPlan translator and analyzer
  { name = "tais2Tracks"
    class = ".actor.TranslatorActor"
    read-from = "/swim/tais"
    write-to = "/tracks"
    translator = {
      class = ".air.translator.TATrackAndFlightPlan2TATrack"
      allow-incomplete = true
      attach-rev = true
    }
  },
  { name = "trackStats"
    class = ".air.actor.TATrackStatsCollector"
    read-from = "/tracks"
    write-to = "/stats"
    drop-after = "3 minutes"
    title = "4. TAIS Track Statistics"
    bucket-count = 1
  },

  //--- reporters
  { name = "statsConsole"
    class = ".actor.ConsoleStatsReporter"
    read-from = "/stats"
  },
  { name = "statsTextWriter"
    class = ".actor.FileStatsReporter"
    read-from = "/stats"
    pathname = ${race.data}"/"${race.date}"/stats.txt"
    formatters = [
      { class = ".air.actor.TATrackStatsFormatter" }
    ]
  },

  // HttpStatsReporter serves localhost:8080/race/statistics
  { name = "httpServer"
    class = "gov.nasa.race.http.HttpServer"
    host = "localhost"
    port = "8080"
    routes = [
      { name = "statsReporter"
        class = "gov.nasa.race.http.HttpStatsReporter"
        read-from = "/stats"
        refresh = 10s
        formatters = [
          { class = ".air.actor.HtmlTATrackStatsFormatter" }
        ]
      }
    ]
  }
]

include classpath("config/logging-race.conf")