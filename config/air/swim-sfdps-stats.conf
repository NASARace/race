name = "swim-sfdps-stats"

race.data = "tmp"
//data-dir = ${race.data}
//start-time = ${race.date}

actors = [

//  { name = "sfdpsReplay"
//    class = ".actor.ReplayActor"
//    pathname = ${race.data}"/sfdps.xml.gz"
//    write-to = "/swim/sfdps/raw"
//    archive-reader = ".archive.TextArchiveReader"
//    buffer-size = 32768
//  },

  { name = "portMapper"
    class = ".actor.PortForwarder"
    user = "??gw.user"
    host = "??gw.host"
    forward = "??gw.forward"
    create-timeout = 30s
  },
  { name = "jmsImporter"
    class = ".jms.JMSImportActor"
    broker-uri = "??swim.uri.sfdps"
    user = "??swim.user"
    pw = "??swim.pw"
    //write-to = "/swim/sfdps/raw"  // with validation
    write-to = "/swim/sfdps/valid" // without validation
    jms-topic = "nasa.topic05.sfdps"
  },
//  { name = "rawArchiver"
//    class = ".actor.ArchiveActor"
//    read-from = "/swim/sfdps/raw"
//    archive-writer = ".archive.TextArchiveWriter"
//    pathname = ${race.data}"/"${race.date}"/sfdps.xml"
//    buffer-size = 32768
//    append = false
//    compressed = true
//  },

  // we use a separate filter actor so that we get duplicates for all messages
  // NOTE - we need the filter since <FDPSMsg> is currently not in the schema
  { name = "msgFilter"
    class = ".actor.FilterActor"
    read-from = "/swim/sfdps/raw"
    write-to = "/swim/sfdps/raw-relevant"

    filters = [
      { class = ".common.RegexFilter"
        regex = [ "ns5:MessageCollection" ]
      }
    ]
  },

  { name = "xmlValidator"
    class = ".actor.XmlValidator"
    schemas = [ "../swim/schemas/extensions/nas/Nas.xsd" ]
    read-from = "/swim/sfdps/raw-relevant"
    write-to-pass = "/swim/sfdps/valid"
    write-to-fail = "/swim/sfdps/invalid"
    failure-prefix = "<!-- "
    failure-postfix =  " -->\n"
    //loglevel = "info"
  },
  { name = "invalidsArchiver"
    class = ".actor.ArchiveActor"
    read-from = "/swim/sfdps/invalid"
    archive-writer = ".archive.TextArchiveWriter"
    pathname = ${race.data}"/"${race.date}"/invalid-sfdps.xml"
    buffer-size = 32768
    append = false
    compressed = true
  },

  { name = "validMsgStatsCollector"
    class = ".actor.XmlMsgStatsCollector"
    read-from = "/swim/sfdps/valid"
    write-to = "/stats"
    title = "1. Valid SWIM SFDPS Message Statistics"
    paths = [
      "ns5:MessageCollection",
      "ns5:MessageCollection/message/flight",
      "ns5:NasFlight",
      "**/enRoute/**/location/pos"
    ]
  },
  { name = "invalidMsgStatsCollector"
    class = ".actor.XmlMsgStatsCollector"
    read-from = "/swim/sfdps/invalid"
    write-to = "/stats"
    title = "2. Invalid SWIM SFDPS Message Statistics"
    matchers = [
      { name = "invalid position value (no separator space)"
        patterns = ["<!-- cvc-.*: The value '[0-9.\\-]+' of element 'pos' is not valid. -->"] },
      { name = "invalid '???' attribute value"
        patterns = ["<!-- cvc-.*: The value '\\?\\?\\?' of attribute"] },
      { name = "unclassified"
        patterns = [".*"] }
    ]
  },

//  { name = "dupMsgDetector"
//    class = ".actor.DuplicatedMsgDetector"
//    read-from = "/swim/sfdps/raw"
//    write-to = "/stats"
//    title = "3. Duplicated SWIM SFDPS Message Statistics"
//    matchers = [
//      { name = "flight completed"
//        patterns = ["fdpsFlightStatus=\"COMPLETED\""] },
//      { name = "enRoute location"
//        patterns = ["<enRoute ", "<location "] },
//      { name = "enRoute"
//        patterns = ["<enRoute "] },
//      { name = "ns5:NasFlight"
//        patterns = ["<ns5:NasFlight "] },
//      { name = "ns5:MessageCollection"
//        patterns = ["<ns5:MessageCollection "] }
//    ]
//  },

  { name = "fixm2fpos"
    class = ".actor.TranslatorActor"
    read-from = "/swim/sfdps/valid"
    write-to = "/fpos"
    translator = {
      class = ".air.translator.FIXM2FlightObject"
    }
  },

  { name = "fposStats"
    class = ".air.actor.FPosStatsCollector"
    read-from = "/fpos"
    write-to = "/stats"
    drop-after = "5 minutes"
    title = "4. SFDPS Flight Position Statistics"

    can-reset-clock = true
    max-clock-diff = "5 minutes" // set sim time from first received pos if exceeded (useful for replays)
    //loglevel = "info"
  },

  { name = "statsPrinter"
    class = ".actor.ConsoleStatsReporter"
    read-from = "/stats"
  },

  { name = "httpServer"
    class = "gov.nasa.race.http.HttpServer"
    host = "localhost"
    port = "8080"
    routes = [
      { name = "statsReporter"
        class = "gov.nasa.race.http.HttpStatsReporter"
        read-from = "/stats"
        refresh = 10s
        formatters = [
          { class = "gov.nasa.race.http.HtmlMessageStatsFormatter" }
          //{ class = "gov.nasa.race.air.FPosStatsFormatter" }
        ]
      }
    ]
  }
]

include classpath("config/logging-race.conf")
