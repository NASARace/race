// example for SBS (ADS-B) import  using a remotely running dump1090 with a mapped 30003 port, displaying
// flight in a WorldWind viewer actor

// make sure dump1090 is running on remote machine, then start:
//   ./race config/imports/sbs-fpos-portmap.conf
//
// this assumes a user 'pi' on a raspberrypi.local machine, who
// is interactively authenticated during actor construction

name = "sbs-import"

actors = [
//  { name = "portMapper"
//    class = ".actors.process.PortForwarder"
//    user = "pi"
//    host = "raspberrypi.local"
//    forward = "30003:localhost:30003"
//  },

  { name = "sbsImporter"
    class = ".actors.imports.SBSImportActor"
    write-to = "sbs"
  },

  { name = "sbs2fpos"
    class = ".actors.translators.TranslatorActor"
    read-from = "sbs"
    write-to = "fpos"
    translator = {
      class = "gov.nasa.race.data.translators.SBS2FlightPos"
      temp-cs = false // FlightPosLayer doesn't handle renames yet
    }
  },
  { name = "fposDropper"
    class = ".actors.injectors.FlightDropperActor"
    read-from = "fpos"
    write-to = "fpos" // yes, we can write to the same channel
    drop-after = "30 seconds" // sim time
  },

  { name = "geoViewer"
    class = ".ww.RaceViewerActor"
    layer-categories = ["data"]
    collapse = ["clocks", "sync"]
    layers = [
      { name = "ads-b"
        class = ".ww.layers.FlightPosLayer"
        read-from = "fpos"
        description = "ADS-B flight positions"
        categories = ["data"]
        enabled = true
        color = "cyan"
      }
    ]

    size = [1400,1000]
    eye {
      lat = 37.246822
      lon = -121.9770277
      altitude-ft = 200000
    }

    cache-dir = ${user.home}"/.WorldWind"
  }
]

include classpath("config/logging-race.conf")
